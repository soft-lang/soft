nodetype,primitivetype,nodegroup,precedence,literal,literalpattern,nodepattern,prologue,epilogue,growfrom,growinto,nodeseverity
RET,void,,,,,,,,,,
SOURCE_CODE,text,,,,,,,,,,
BANG_EQ,,OPS,,!=,,,,,,,
EQ_EQ,,OPS,,==,,,,,,,
BANG,,OPS,,!,,,,,,,
PERCENT,,OPS,,%,,,,,,,
ASTERISK,,OPS,,*,,,,,,,
PLUS,,OPS,,+,,,,,,,
COMMA,,OPS,,",",,,,,,,
MINUS,,OPS,,-,,,,,,,
SLASH,,OPS,,/,,,,,,,
COLON,,OPS,,:,,,,,,,
LT,,OPS,,<,,,,,,,
EQ,,OPS,,=,,,,,,,
GT,,OPS,,>,,,,,,,
LPAREN,,,,(,,,,,,,
RPAREN,,,,),,,,,,,
SEMICOLON,,,,;,,,,,,,
LBRACKET,,,,[,,,,,,,
RBRACKET,,,,],,,,,,,
LBRACE,,,,{,,,,,,,
RBRACE,,,,},,,,,,,
WHITE_SPACE,,,,,(\s+),,,,,,
INTEGER,integer,VALUE,,,([0-9]+),,,,,,
IDENTIFIER,name,VALUE,,,([a-zA-Z_]+),,,,,,
IF,,,,,^(if)$,,,,IDENTIFIER,,
ELSE,,,,,^(else)$,,,,IDENTIFIER,,
FUNCTION,,,,,^(fn)$,,,,IDENTIFIER,,
LET,,,,,^(let)$,,,,IDENTIFIER,,
RETURN,,,,,^(return)$,,,,IDENTIFIER,,
BOOLEAN,boolean,VALUE,,,^(true|false)$,,,,IDENTIFIER,,
TEXT,text,VALUE,,,"("")((?:[^""\\]|\\.)*)("")",,,,,,
ILLEGAL,,,,,(.),,,,,,ERROR
CALL_LPAREN,,,,,,(?:(?#VALUE) | RBRACE) (LPAREN),,,,,
VARIABLE,name,,,,,FUNCTION LPAREN (IDENTIFIER) | VARIABLE COMMA (IDENTIFIER) | LET (IDENTIFIER) EQ,,,,,
CONDITION,,,,,,IF (SUB_EXPRESSION),,,,,
PARAMETERS,,,,,,(LPAREN (?:VARIABLE (?:COMMA VARIABLE)*)? RPAREN) LBRACE,,,,,
FUNCTION_DECLARATION,void,VALUE,,,,(FUNCTION PARAMETERS BLOCK_STATEMENT),,RET,,,
INITIALIZATION,,,,,,LET VARIABLE (EQ),,,,,
INDEX_LOOKUP,,,,,,((?#VALUE)) LBRACKET,,,,,
TRUE_BRANCH,,,,,,CONDITION (BLOCK_STATEMENT),,,,,
FALSE_BRANCH,,,,,,ELSE (BLOCK_STATEMENT | IF_EXPRESSION),,,,,
DECLARATION,void,STATEMENT,,,,(LET VARIABLE INITIALIZATION EXPRESSION (?:SEMICOLON)?),,,,,
VALUE,,,,,,((?#VALUE)),,,,,
HASH_EXPRESSION,,VALUE,,,,(LBRACE RBRACE | LBRACE (?:VALUE | (?#OPS))+ COLON (?:VALUE | (?#OPS))+ RBRACE),,,VALUE,,
ARRAY_EXPRESSION,,VALUE,,,,(?:^ | (?!INDEX_LOOKUP)[A-Z_]+) (LBRACKET (?:VALUE | (?#OPS))* RBRACKET),,,VALUE,,
INDEX_EXPRESSION,,VALUE,,,,(INDEX_LOOKUP LBRACKET (?:VALUE | (?#OPS))+ RBRACKET),,,VALUE,,
ARGUMENTS_EXPRESSION,,,,,,(CALL_LPAREN (?:VALUE | (?#OPS))* RPAREN),,,VALUE,,
CALL_EXPRESSION,,VALUE,,,,((?:VALUE DOT)* VALUE ARGUMENTS_EXPRESSION (?:DOT VALUE)*),,,VALUE,,
SUB_EXPRESSION,,VALUE,,,,(LPAREN (?:VALUE | (?#OPS))+ RPAREN),,,VALUE,,
IF_EXPRESSION,,VALUE,,,,(IF CONDITION TRUE_BRANCH (?:ELSE FALSE_BRANCH)?) (?!ELSE)(?=[A-Z_]+ | $),,,,,
EXPRESSION,,,,,,((?:VALUE | (?#OPS))+),,,VALUE,,
HASH,,,,,,(LBRACE (?:VALUE (?:COMMA VALUE)*)? RBRACE),,,,VALUE,
ARRAY,,,,,,(?:^ | (?!INDEX_LOOKUP)[A-Z_]+) (LBRACKET (?:VALUE (?:COMMA VALUE)*)? RBRACKET),,,,VALUE,
INDEX,,,,,,(INDEX_LOOKUP LBRACKET VALUE RBRACKET),,,,VALUE,
ARGUMENTS,,,,,,(CALL_LPAREN (?:VALUE (?:COMMA VALUE)*)? RPAREN),,,,VALUE,
CALL,,,,,,(VALUE ARGUMENTS_EXPRESSION),,,,VALUE,
GROUP,,,,,,(?:^ | (?#OPS)) (LPAREN VALUE RPAREN),,,,VALUE,
NOT,,,PREFIX,,,(BANG VALUE),,,,VALUE,
UNARY_MINUS,,,PREFIX,,,(?:^ | (?!(?:VALUE | RPAREN))[A-Z_]+) (MINUS VALUE),,,,VALUE,
DIVIDE,,,PRODUCT,,,(VALUE SLASH VALUE),,,,VALUE,
MULTIPLY,,,PRODUCT,,,(VALUE ASTERISK VALUE),,,,VALUE,
ADD,,,SUM,,,(VALUE PLUS VALUE),,,,VALUE,
SUBTRACT,,,SUM,,,(VALUE MINUS VALUE),,,,VALUE,
GREATER_THAN,,,LESSGREATER,,,(VALUE GT VALUE),,,,VALUE,
LESS_THAN,,,LESSGREATER,,,(VALUE LT VALUE),,,,VALUE,
EQUAL,,,EQUALS,,,(VALUE EQ_EQ VALUE),,,,VALUE,
NOT_EQUAL,,,EQUALS,,,(VALUE BANG_EQ VALUE),,,,VALUE,
HASH_PAIR,,,,,,(VALUE COLON VALUE),,,,VALUE,
INVALID_EXPRESSION,,,,,,^(?!VALUE$)((?:[A-Z_]+)+)$,,,,VALUE,ERROR
RETURN_STATEMENT,,STATEMENT,,,,(RETURN EXPRESSION (?:SEMICOLON)?),,,,,
BLOCK_STATEMENT,,STATEMENT,,,,(LBRACE (?:STATEMENT)* RBRACE),,,,,
EXPRESSION_STATEMENT,,STATEMENT,,,,(EXPRESSION (?:SEMICOLON)?),,,,,
STATEMENT,,,,,,((?#STATEMENT)),,,,,
STATEMENTS,,,,,,((?:STATEMENT)+ (?:EXPRESSION)? | EXPRESSION),,,,,
UNPARSEABLE,,,,,,(?!STATEMENTS | UNPARSEABLE | PROGRAM)([A-Z_]+),,,,,ERROR
PROGRAM,,,,,,((?:STATEMENTS | UNPARSEABLE)+),,RET,,,
