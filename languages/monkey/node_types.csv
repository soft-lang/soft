language,nodetype,primitivetype,nodegroup,precedence,literal,literalpattern,nodepattern,prologue,epilogue,growfrom,growinto,nodeseverity
monkey,SOURCE_CODE,text,,,,,,,,,,
monkey,ALLOCA,void,,,,,,,,,,
monkey,RET,void,,,,,,,,,,
monkey,EQ,,,,=,,,,,,,
monkey,PLUS,,OPS,,+,,,,,,,
monkey,MINUS,,OPS,,-,,,,,,,
monkey,BANG,,OPS,,!,,,,,,,
monkey,ASTERISK,,OPS,,*,,,,,,,
monkey,PERCENT,,OPS,,%,,,,,,,
monkey,SLASH,,OPS,,/,,,,,,,
monkey,LT,,OPS,,<,,,,,,,
monkey,GT,,OPS,,>,,,,,,,
monkey,EQ_EQ,,OPS,,==,,,,,,,
monkey,BANG_EQ,,OPS,,!=,,,,,,,
monkey,COMMA,,,,",",,,,,,,
monkey,SEMICOLON,,,,;,,,,,,,
monkey,COLON,,,,:,,,,,,,
monkey,LPAREN,,,,(,,,,,,,
monkey,RPAREN,,,,),,,,,,,
monkey,LBRACE,,,,{,,,,,,,
monkey,RBRACE,,,,},,,,,,,
monkey,LBRACKET,,,,[,,,,,,,
monkey,RBRACKET,,,,],,,,,,,
monkey,WHITE_SPACE,,,,,(\s+),,,,,,
monkey,IDENTIFIER,name,VALUE,,,([a-zA-Z_]+),,,,,,
monkey,IF,,,,,^(if)$,,,,IDENTIFIER,,
monkey,ELSE,,,,,^(else)$,,,,IDENTIFIER,,
monkey,FUNCTION,,,,,^(fn)$,,,,IDENTIFIER,,
monkey,LET,,,,,^(let)$,,,,IDENTIFIER,,
monkey,RETURN,,,,,^(return)$,,,,IDENTIFIER,,
monkey,BOOLEAN,boolean,VALUE,,,^(true|false)$,,,,IDENTIFIER,,
monkey,INTEGER,integer,VALUE,,,([0-9]+),,,,,,
monkey,TEXT,text,VALUE,,,"""((?:[^""\\]|\\.)*)""",,,,,,
monkey,ILLEGAL,,,,,(.),,,,,,ERROR
monkey,DIGITS_NOT_ALLOWED_IN_IDENTIFIERS,,,,,,(?:^| )(IDENTIFIER INTEGER),,,,,ERROR
monkey,FUNCTION_NAME,,CALL,,,,(?:^| )(IDENTIFIER) LPAREN,,,,,
monkey,VARIABLE,name,,,,,(?:^| )(?:FUNCTION LPAREN |VARIABLE COMMA |(?=LET IDENTIFIER EQ)LET )(IDENTIFIER) (?:EQ|COMMA|RPAREN),,,,,
monkey,ARGUMENTS,,,,,,(?:^| )FUNCTION (LPAREN(?: VARIABLE(?: COMMA VARIABLE)*)? RPAREN),,,,,
monkey,FUNCTION_DECLARATION,void,VALUE,,,,(?:^| )(FUNCTION ARGUMENTS (?:BLOCK_EXPRESSION|BLOCK_STATEMENT)),ALLOCA,RET,,,
monkey,ANONYMOUS_FUNCTION,,CALL,,,,(?:^| )(FUNCTION_DECLARATION) LPAREN,,,,,
monkey,INDEX,,VALUE,,,,(?:^| )((?:VALUE|ARRAY|HASH) LBRACKET (?:VALUE|EXPRESSION) RBRACKET),,,,,
monkey,HASH_PAIR,,,,,,(?:^| )(?:LBRACE |HASH_PAIR COMMA )((?:VALUE|EXPRESSION) COLON (?:VALUE|EXPRESSION)) (?:COMMA|RBRACE),,,,,
monkey,HASH,,VALUE,,,,(?:^|(?:^| )(?!RBRACKET )[A-Z_]+ )(LBRACE(?: HASH_PAIR(?: COMMA HASH_PAIR)*)? RBRACE),,,,,
monkey,ARRAY,,VALUE,,,,(?:^|(?:^| )(?!(?:RBRACKET|VALUE) )[A-Z_]+ )(LBRACKET(?: (?:VALUE|EXPRESSION)(?: COMMA (?:VALUE|EXPRESSION))*)? RBRACKET),,,,,
monkey,CONDITION,,,,,,(?:^| )IF (SUB_EXPRESSION),,,,,
monkey,TRUE_BRANCH,,,,,,(?:^| )CONDITION (BLOCK_EXPRESSION),,,,,
monkey,FALSE_BRANCH,,,,,,(?:^| )ELSE (BLOCK_EXPRESSION|IF_EXPRESSION),,,,,
monkey,IF_EXPRESSION,,VALUE,,,,(?:^| )(IF CONDITION TRUE_BRANCH(?: ELSE FALSE_BRANCH)?)(?! ELSE)(?= [A-Z_]+|$),,,,,
monkey,VALUE,,,,,,(?:^| )((?#VALUE))(?! EQ)(?: |$),,,,,
monkey,CALL,,VALUE,,,,(?:^| )((?#CALL) LPAREN(?: VALUE(?: COMMA VALUE)*)? RPAREN),,,,,
monkey,GROUP,,VALUE,,,,(?:^|(?#OPS) )(LPAREN VALUE RPAREN),,,,,
monkey,UNARY_MINUS,,VALUE,PREFIX,,,(?:^|(?:^| )(?!(?:VALUE|RPAREN) )[A-Z_]+ )(MINUS VALUE),,,,,
monkey,NOT,,VALUE,PREFIX,,,(?:^| )(BANG VALUE),,,,,
monkey,DIVIDE,,VALUE,PRODUCT,,,(?:^| )(VALUE SLASH VALUE),,,,,
monkey,MULTIPLY,,VALUE,PRODUCT,,,(?:^| )(VALUE ASTERISK VALUE),,,,,
monkey,ADD,,VALUE,SUM,,,(?:^| )(VALUE PLUS VALUE),,,,,
monkey,SUBTRACT,,VALUE,SUM,,,(?:^| )(VALUE MINUS VALUE),,,,,
monkey,LESS_THAN,,VALUE,LESSGREATER,,,(?:^| )(VALUE LT VALUE),,,,,
monkey,GREATER_THAN,,VALUE,LESSGREATER,,,(?:^| )(VALUE GT VALUE),,,,,
monkey,EQUAL,,VALUE,EQUALS,,,(?:^| )(VALUE EQ_EQ VALUE),,,,,
monkey,NOT_EQUAL,,VALUE,EQUALS,,,(?:^| )(VALUE BANG_EQ VALUE),,,,,
monkey,BLOCK_EXPRESSION,,VALUE,,,,(?:^| )(LBRACE(?: EXPRESSION_STATEMENT)*(?: EXPRESSION)? RBRACE),,,,,
monkey,CALL_EXPRESSION,,VALUE,,,,(?:^| )((?#CALL) LPAREN(?: VALUE| (?#OPS)| COMMA)* RPAREN),,,,,
monkey,SUB_EXPRESSION,,VALUE,,,,(?:^|(?:^| )(?#OPS) |IF |COMMA )(LPAREN (?:VALUE|(?#OPS))(?: (?:VALUE|(?#OPS)))* RPAREN),,,,,
monkey,EXPRESSION,,,,,,(?:^|(?:^| )(?:SEMICOLON |LBRACE |LBRACKET |EQ |RETURN |COMMA |COLON ))((?:VALUE|(?#OPS))(?: (?:VALUE|(?#OPS)))*)(?: SEMICOLON| RBRACE| RBRACKET| COMMA| COLON|$),,,,,
monkey,IF_STATEMENT,void,STATEMENT,,,,(?:^| )(IF CONDITION BLOCK_STATEMENT(?: ELSE BLOCK_STATEMENT)?)(?! ELSE)(?= [A-Z_]+|$),,,,,
monkey,LET_STATEMENT,void,STATEMENT,,,,(?:^| )(LET VARIABLE EQ EXPRESSION SEMICOLON),,,,,
monkey,RETURN_STATEMENT,,STATEMENT,,,,(?:^| )(RETURN EXPRESSION SEMICOLON),,,,,
monkey,CANNOT_REASSIGN_VARIABLE_MUST_USE_LET,,,,,,(?!LET )(?:^|[A-Z_]+ )(IDENTIFIER EQ EXPRESSION SEMICOLON),,,,,ERROR
monkey,EXPRESSION_STATEMENT,,STATEMENT,,,,(?:^| )(EXPRESSION SEMICOLON),,,,,
monkey,BLOCK_STATEMENT,,,,,,(?:^| )(LBRACE(?: STATEMENT)* RBRACE),,,,,
monkey,STATEMENT,,,,,,(?:^| )((?#STATEMENT)),,,,,
monkey,STATEMENTS,,,,,,(?:^| )(STATEMENT(?: STATEMENT)*(?: EXPRESSION)?|EXPRESSION),,,,,
monkey,UNPARSEABLE,,,,,,(?:^| )(?!STATEMENTS|UNPARSEABLE|PROGRAM)([A-Z_]+),,,,,ERROR
monkey,PROGRAM,,,,,,(?:^| )((?:STATEMENTS|UNPARSEABLE)(?: (?:STATEMENTS|UNPARSEABLE))*),ALLOCA,RET,,,
