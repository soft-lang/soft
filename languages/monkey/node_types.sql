SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'SOURCE_CODE');
SELECT New_Node_Type(_Language := 'monkey', _TerminalType := 'void'::regtype,                                                                                            _NodeType := 'ALLOCA');
SELECT New_Node_Type(_Language := 'monkey', _TerminalType := 'void'::regtype,                                                                                            _NodeType := 'RET');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'FUNCTION_LABEL');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'FREE_STATEMENT');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'ARGS');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'EQ',                   _Literal         := '=');
SELECT New_Node_Type(_Language := 'monkey',                                      _NodeGroup := 'OPS',                                                                    _NodeType := 'PLUS',                 _Literal         := '+');
SELECT New_Node_Type(_Language := 'monkey',                                      _NodeGroup := 'OPS',                                                                    _NodeType := 'MINUS',                _Literal         := '-');
SELECT New_Node_Type(_Language := 'monkey',                                      _NodeGroup := 'OPS',                                                                    _NodeType := 'BANG',                 _Literal         := '!');
SELECT New_Node_Type(_Language := 'monkey',                                      _NodeGroup := 'OPS',                                                                    _NodeType := 'ASTERISK',             _Literal         := '*');
SELECT New_Node_Type(_Language := 'monkey',                                      _NodeGroup := 'OPS',                                                                    _NodeType := 'SLASH',                _Literal         := '/');
SELECT New_Node_Type(_Language := 'monkey',                                      _NodeGroup := 'OPS',                                                                    _NodeType := 'LT',                   _Literal         := '<');
SELECT New_Node_Type(_Language := 'monkey',                                      _NodeGroup := 'OPS',                                                                    _NodeType := 'GT',                   _Literal         := '>');
SELECT New_Node_Type(_Language := 'monkey',                                      _NodeGroup := 'OPS',                                                                    _NodeType := 'EQ_EQ',                _Literal         := '==');
SELECT New_Node_Type(_Language := 'monkey',                                      _NodeGroup := 'OPS',                                                                    _NodeType := 'BANG_EQ',              _Literal         := '!=');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'COMMA',                _Literal         := ',');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'SEMICOLON',            _Literal         := ';');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'COLON',                _Literal         := ':');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'LPAREN',               _Literal         := '(');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'RPAREN',               _Literal         := ')');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'LBRACE',               _Literal         := '{');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'RBRACE',               _Literal         := '}');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'LBRACKET',             _Literal         := '[');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'RBRACKET',             _Literal         := ']');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'WHITE_SPACE',          _LiteralPattern  := '(\s+)');
SELECT New_Node_Type(_Language := 'monkey', _TerminalType := 'name'::regtype,    _NodeGroup := 'VALUE',                                                                  _NodeType := 'IDENTIFIER',           _LiteralPattern  := '([a-zA-Z_]+)');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowFrom := 'IDENTIFIER',                                   _NodeType := 'FUNCTION',             _LiteralPattern  := '^(fn)$');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowFrom := 'IDENTIFIER',                                   _NodeType := 'LET',                  _LiteralPattern  := '^(let)$');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowFrom := 'IDENTIFIER',                                   _NodeType := 'IF',                   _LiteralPattern  := '^(if)$');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowFrom := 'IDENTIFIER',                                   _NodeType := 'ELSE',                 _LiteralPattern  := '^(else)$');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowFrom := 'IDENTIFIER',                                   _NodeType := 'RETURN',               _LiteralPattern  := '^(return)$');
SELECT New_Node_Type(_Language := 'monkey', _TerminalType := 'boolean'::regtype, _NodeGroup := 'VALUE',     _GrowFrom := 'IDENTIFIER',                                   _NodeType := 'BOOLEAN',              _LiteralPattern  := '^(true|false)$');
SELECT New_Node_Type(_Language := 'monkey', _TerminalType := 'numeric'::regtype, _NodeGroup := 'VALUE',                                                                  _NodeType := 'NUMERIC',              _LiteralPattern  := '([0-9]+\.[0-9]+)');
SELECT New_Node_Type(_Language := 'monkey', _TerminalType := 'integer'::regtype, _NodeGroup := 'VALUE',                                                                  _NodeType := 'INTEGER',              _LiteralPattern  := '([0-9]+)');
SELECT New_Node_Type(_Language := 'monkey', _TerminalType := 'text'::regtype,    _NodeGroup := 'VALUE',                                                                  _NodeType := 'TEXT',                 _LiteralPattern  := '"((?:[^"\\]|\\.)*)"');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                    _NodeSeverity := 'ERROR', _NodeType := 'ILLEGAL',              _LiteralPattern  := '(.)');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'STORE_ARGS',           _NodePattern     := '(?:^| )(?:FUNCTION\d+ )(LPAREN\d+(?: IDENTIFIER\d+(?: COMMA\d+ IDENTIFIER\d+)*)? RPAREN\d+)');
SELECT New_Node_Type(_Language := 'monkey', _TerminalType := 'name'::regtype,                                                                                            _NodeType := 'VARIABLE',             _NodePattern     := '(?:^| )(IDENTIFIER\d+) EQ\d+');
SELECT New_Node_Type(_Language := 'monkey', _TerminalType := 'name'::regtype,    _NodeGroup := 'VALUE',                                                                  _NodeType := 'FUNCTION_NAME',        _NodePattern     := '(?:^| )(IDENTIFIER\d+) LPAREN\d+');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'VALUE',                _NodePattern     := '(?:^| )((?#VALUE)\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                      _NodeGroup := 'VALUE',     _GrowFrom := 'VALUE',                                        _NodeType := 'IF_EXPRESSION',        _NodePattern     := '(?:^| )(IF\d+ LPAREN\d+(?: (?:VALUE\d+|(?#OPS)\d+))+ RPAREN\d+ LBRACE\d+(?: (?:VALUE\d+|(?#OPS)\d+))+ RBRACE\d+ ELSE\d+ LBRACE\d+(?: (?:VALUE\d+|(?#OPS)\d+))+ RBRACE\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                      _NodeGroup := 'VALUE',     _GrowFrom := 'VALUE',                                        _NodeType := 'CALL_EXPRESSION',      _NodePattern     := '(?:^| )(VALUE\d+ LPAREN\d+(?: (?:VALUE\d+|COMMA\d+|(?#OPS)\d+))* RPAREN\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                      _NodeGroup := 'VALUE',     _GrowFrom := 'VALUE',                                        _NodeType := 'SUB_EXPRESSION',       _NodePattern     := '(?:^| )(LPAREN\d+(?: (?:VALUE\d+|(?#OPS)\d+))+ RPAREN\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                      _NodeGroup := 'STATEMENT', _GrowFrom := 'VALUE',                                        _NodeType := 'EXPRESSION',           _NodePattern     := '(?:^| )((?:VALUE\d+|IF_EXPR\d+|CALL\d+|GROUP\d+|(?#OPS)\d+)(?: (?:VALUE\d+|IF_EXPR\d+|CALL\d+|GROUP\d+|(?#OPS)\d+))*)');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowInto := 'VALUE',                                        _NodeType := 'IF_EXPR',              _NodePattern     := '(?:^| )(IF\d+ LPAREN\d+ VALUE\d+ RPAREN\d+ LBRACE\d+ VALUE\d+ RBRACE\d+ ELSE\d+ LBRACE\d+ VALUE\d+ RBRACE\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowInto := 'VALUE',                                        _NodeType := 'CALL',                 _NodePattern     := '(?:^| )(VALUE\d+ LPAREN\d+(?: VALUE\d+(?: COMMA\d+ VALUE\d+)*)? RPAREN\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowInto := 'VALUE',                                        _NodeType := 'GROUP',                _NodePattern     := '(?:^| )(LPAREN\d+ VALUE\d+ RPAREN\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowInto := 'VALUE',                                        _NodeType := 'UNARY_MINUS',          _NodePattern     := '(?:^|(?:^| )(?!VALUE\d+ )[A-Z_]+\d+ )(MINUS\d+ VALUE\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowInto := 'VALUE',                                        _NodeType := 'MULTIPLY',             _NodePattern     := '(?:^| )(VALUE\d+ ASTERISK\d+ VALUE\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowInto := 'VALUE',                                        _NodeType := 'DIVIDE',               _NodePattern     := '(?:^| )(VALUE\d+ SLASH\d+ VALUE\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowInto := 'VALUE',                                        _NodeType := 'SUBTRACT',             _NodePattern     := '(?:^| )(VALUE\d+ MINUS\d+ VALUE\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowInto := 'VALUE',                                        _NodeType := 'ADD',                  _NodePattern     := '(?:^| )(VALUE\d+ PLUS\d+ VALUE\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowInto := 'VALUE',                                        _NodeType := 'LESS_THAN',            _NodePattern     := '(?:^| )(VALUE\d+ LT\d+ VALUE\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowInto := 'VALUE',                                        _NodeType := 'GREATER_THAN',         _NodePattern     := '(?:^| )(VALUE\d+ GT\d+ VALUE\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowInto := 'VALUE',                                        _NodeType := 'EQUAL',                _NodePattern     := '(?:^| )(VALUE\d+ EQ_EQ\d+ VALUE\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                                                 _GrowInto := 'VALUE',                                        _NodeType := 'NOT_EQUAL',            _NodePattern     := '(?:^| )(VALUE\d+ BANG_EQ\d+ VALUE\d+)');
SELECT New_Node_Type(_Language := 'monkey', _TerminalType := 'void'::regtype,    _NodeGroup := 'STATEMENT',                                                              _NodeType := 'IF_STATEMENT',         _NodePattern     := '(?:^| )(IF\d+ EXPRESSION\d+ BLOCK_STATEMENT\d+ ELSE\d+ BLOCK_STATEMENT\d+)');
SELECT New_Node_Type(_Language := 'monkey', _TerminalType := 'void'::regtype,    _NodeGroup := 'STATEMENT',                                                              _NodeType := 'LET_STATEMENT',        _NodePattern     := '(?:^| )(LET\d+ VARIABLE\d+ EQ\d+ EXPRESSION\d+)');
SELECT New_Node_Type(_Language := 'monkey', _TerminalType := 'void'::regtype,    _NodeGroup := 'STATEMENT',                                                              _NodeType := 'BLOCK_STATEMENT',      _NodePattern     := '(?:^| )(LBRACE\d+(?: STATEMENT\d+)* RBRACE\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                      _NodeGroup := 'VALUE',                                                                  _NodeType := 'BLOCK_EXPRESSION',     _NodePattern     := '(?:^| )(LBRACE\d+(?: STATEMENT\d+)* EXPRESSION\d+ RBRACE\d+)');
SELECT New_Node_Type(_Language := 'monkey', _TerminalType := 'void'::regtype,    _NodeGroup := 'VALUE',                       _Prologue := 'ALLOCA', _Epilogue := 'RET', _NodeType := 'FUNCTION_DECLARATION', _NodePattern     := '(?:^| )(FUNCTION\d+ STORE_ARGS\d+ (?:BLOCK_EXPRESSION|STATEMENTS)\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'STATEMENT',            _NodePattern     := '(?:^| )((?#STATEMENT)\d+ SEMICOLON\d+|IF_STATEMENT\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                                              _NodeType := 'STATEMENTS',           _NodePattern     := '(?:^| )(STATEMENT\d+(?: STATEMENT\d+)*)');
SELECT New_Node_Type(_Language := 'monkey',                                                                                                    _NodeSeverity := 'ERROR', _NodeType := 'UNPARSEABLE',          _NodePattern     := '(?:^| )(?!STATEMENTS\d+|UNPARSEABLE\d+|PROGRAM\d+)([A-Z_]+\d+)');
SELECT New_Node_Type(_Language := 'monkey',                                                                                   _Prologue := 'ALLOCA', _Epilogue := 'RET', _NodeType := 'PROGRAM',              _NodePattern     := '(?:^| )((?:STATEMENTS\d+|UNPARSEABLE\d+)(?: (?:STATEMENTS\d+|UNPARSEABLE\d+))*)');
