// Demo of monkeylox (monkey + lox)

// This file contains intermixed code
// that is valid for either monkey or lox.

// In this demo we will focus on the differences between the languages.

// In monkey there are no comments,
// but in lox anything after // is a comment.

// In monkey "let" is used to declare variables.
// Variables must always be assigned a value upon declaration.
// Reassignment is forbidden.
let a = 1;

// In lox "var" is used to declare variables.
// Variables don't have to be assigned a value upon declaration.
// Reassignment is allowed.
var b = 2;
var c;
c = 3;
b = 4;

// In lox, tests can be inlined by writing a comment suffixed by "expect: "
// and what is expected to be written to STDOUT.
// In monkey, tests are written in separate Go files and cannot be inlined.

// In monkey, you print to STDOUT using the built-in function puts().
puts(b); // expect: 4

// In lox, you use the keyword print instead.
print c; // expect: 3

// In lox, identifiers (such as variables, functions, etc) can contain
// digits as long as it's not the first character,
// but in monkey you can only use [a-zA-Z_]+.
let invalidm0nkeyvariable = 5;
var validl0xvariable = 6;
print invalidm0nkeyvariable + validl0xvariable; // expect: 11

// In lox, you also have support for "<=" and ">="
// that are missing in monkey.
print 7 <= 6; // expect: false
print 7 >= 7; // expect: true

// Lox has support for decimals,
// but monkey only supports integers.
print 7.8; // expect: 7.8
puts (8.9); // expect: 8.9

// In monkey, functions are declared as normal variables using the "fn" keyword.
let d = fn(a,b) { return a+b; }
puts(d(9,10)); // expect: 19

// In lox, functions are declared using the "fun" keyword.
fun e(a,b) { return a+b; }
print e(11,12); // expect: 23

// In monkey, ifs are expressions and the true/false branches must be within curly braces {...}.
puts(1 + if (true) {2} else {3} * 4); // expect: 9

// In lox, ifs are statements and cannot be used as expressions,
// but you don't need curly braces {...} for single statements,
// but you of course do need them if you have multiple statements.
if (true)
    print "true branch";
else {
    print "false branch stmt 1";
    print "false branch stmt 2";
}
// expect: true branch

// In both lox and monkey, when evaluating if an expression is boolean true or false,
// everything is "true", expect boolean "false" and "nil".

if (0)
    print "0 is true"; // expect: 0 is true

if (-1)
    print "-1 is true"; // expect: -1 is true

if ("a string")
    print "a string is true"; // expect: a string is true

