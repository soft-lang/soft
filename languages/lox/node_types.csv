language,nodetype,primitivetype,nodegroup,precedence,literal,literalpattern,nodepattern,prologue,epilogue,growfrom,growinto,nodeseverity
lox,ALLOCA,void,,,,,,,,,,
lox,RET,void,,,,,,,,,,
lox,SOURCE_CODE,text,,,,,,,,,,
lox,BANG_EQ,,OPS,,!=,,,,,,,
lox,LT_EQ,,OPS,,<=,,,,,,,
lox,EQ_EQ,,OPS,,==,,,,,,,
lox,GT_EQ,,OPS,,>=,,,,,,,
lox,BANG,,OPS,,!,,,,,,,
lox,PERCENT,,OPS,,%,,,,,,,
lox,ASTERISK,,OPS,,*,,,,,,,
lox,PLUS,,OPS,,+,,,,,,,
lox,MINUS,,OPS,,-,,,,,,,
lox,SLASH,,OPS,,/,,,,,,,
lox,LT,,OPS,,<,,,,,,,
lox,GT,,OPS,,>,,,,,,,
lox,LPAREN,,,,(,,,,,,,
lox,RPAREN,,,,),,,,,,,
lox,COMMA,,,,",",,,,,,,
lox,DOT,,,,.,,,,,,,
lox,COLON,,,,:,,,,,,,
lox,SEMICOLON,,,,;,,,,,,,
lox,EQ,,,,=,,,,,,,
lox,LBRACKET,,,,[,,,,,,,
lox,RBRACKET,,,,],,,,,,,
lox,LBRACE,,,,{,,,,,,,
lox,RBRACE,,,,},,,,,,,
lox,WHITE_SPACE,,,,,(\s+),,,,,,
lox,IDENTIFIER,name,VALUE,,,([a-zA-Z_]+),,,,,,
lox,IF,,,,,^(if)$,,,,IDENTIFIER,,
lox,ELSE,,,,,^(else)$,,,,IDENTIFIER,,
lox,FUNCTION,,,,,^(fn)$,,,,IDENTIFIER,,
lox,LET,,,,,^(let)$,,,,IDENTIFIER,,
lox,RETURN,,,,,^(return)$,,,,IDENTIFIER,,
lox,BOOLEAN,boolean,VALUE,,,^(true|false)$,,,,IDENTIFIER,,
lox,INTEGER,integer,VALUE,,,([0-9]+),,,,,,
lox,TEXT,text,VALUE,,,"""((?:[^""\\]|\\.)*)""",,,,,,
lox,ILLEGAL,,,,,(.),,,,,,ERROR
lox,AND,,,,,^(and)$,,,,IDENTIFIER,,
lox,CLASS,,,,,^(class)$,,,,IDENTIFIER,,
lox,FOR,,,,,^(for)$,,,,IDENTIFIER,,
lox,FUN,,,,,^(fun)$,,,,IDENTIFIER,,
lox,NIL,nil,VALUE,,,^(nil)$,,,,IDENTIFIER,,
lox,OR,,,,,^(or)$,,,,IDENTIFIER,,
lox,PRINT,,,,,^(print)$,,,,IDENTIFIER,,
lox,SUPER,,,,,^(super)$,,,,IDENTIFIER,,
lox,THIS,,,,,^(this)$,,,,IDENTIFIER,,
lox,VAR,,,,,^(var)$,,,,IDENTIFIER,,
lox,WHILE,,,,,^(while)$,,,,IDENTIFIER,,
lox,FUNCTION_NAME,,CALL,,,,(?:^| )(IDENTIFIER) LPAREN,,,,,
lox,VARIABLE,name,,,,,(?:^| )(?:FUNCTION LPAREN |VARIABLE COMMA |(?=LET IDENTIFIER EQ)LET )(IDENTIFIER) (?:EQ|COMMA|RPAREN),,,,,
lox,ARGUMENTS,,,,,,(?:^| )FUNCTION (LPAREN(?: VARIABLE(?: COMMA VARIABLE)*)? RPAREN),,,,,
lox,FUNCTION_DECLARATION,void,VALUE,,,,(?:^| )(FUNCTION ARGUMENTS (?:BLOCK_EXPRESSION|BLOCK_STATEMENT)),ALLOCA,RET,,,
lox,ANONYMOUS_FUNCTION,,CALL,,,,(?:^| )(FUNCTION_DECLARATION) LPAREN,,,,,
lox,INDEX,,VALUE,,,,(?:^| )((?:VALUE|ARRAY|HASH) LBRACKET (?:VALUE|EXPRESSION) RBRACKET),,,,,
lox,HASH_PAIR,,,,,,(?:^| )(?:LBRACE |HASH_PAIR COMMA )((?:VALUE|EXPRESSION) COLON (?:VALUE|EXPRESSION)) (?:COMMA|RBRACE),,,,,
lox,HASH,,VALUE,,,,(?:^|(?:^| )(?!RBRACKET )[A-Z_]+ )(LBRACE(?: HASH_PAIR(?: COMMA HASH_PAIR)*)? RBRACE),,,,,
lox,ARRAY,,VALUE,,,,(?:^|(?:^| )(?!(?:RBRACKET|VALUE) )[A-Z_]+ )(LBRACKET(?: (?:VALUE|EXPRESSION)(?: COMMA (?:VALUE|EXPRESSION))*)? RBRACKET),,,,,
lox,CONDITION,,,,,,(?:^| )IF (SUB_EXPRESSION),,,,,
lox,TRUE_BRANCH,,,,,,(?:^| )CONDITION (BLOCK_EXPRESSION),,,,,
lox,FALSE_BRANCH,,,,,,(?:^| )ELSE (BLOCK_EXPRESSION|IF_EXPRESSION),,,,,
lox,IF_EXPRESSION,,VALUE,,,,(?:^| )(IF CONDITION TRUE_BRANCH(?: ELSE FALSE_BRANCH)?)(?! ELSE)(?= [A-Z_]+|$),,,,,
lox,VALUE,,,,,,(?:^| )((?#VALUE))(?! EQ)(?: |$),,,,,
lox,BLOCK_EXPRESSION,,VALUE,,,,(?:^| )(LBRACE(?: (?#STATEMENT))*(?: EXPRESSION)? RBRACE),,,,,
lox,CALL_EXPRESSION,,VALUE,,,,(?:^| )((?#CALL) LPAREN(?: VALUE| (?#OPS)| COMMA)* RPAREN),,,VALUE,,
lox,SUB_EXPRESSION,,VALUE,,,,(?:^|(?:^| )(?#OPS) |IF |COMMA )(LPAREN (?:VALUE|(?#OPS))(?: (?:VALUE|(?#OPS)))* RPAREN),,,VALUE,,
lox,EXPRESSION,,,,,,(?:^|(?:^| )(?:SEMICOLON |LBRACE |LBRACKET |EQ |RETURN |COMMA |COLON |PRINT ))((?:VALUE|(?#OPS))(?: (?:VALUE|(?#OPS)))*)(?: SEMICOLON| RBRACE| RBRACKET| COMMA| COLON|$),,,VALUE,,
lox,CALL,,,,,,(?:^| )((?#CALL) LPAREN(?: VALUE(?: COMMA VALUE)*)? RPAREN),,,,VALUE,
lox,GROUP,,,,,,(?:^|(?#OPS) )(LPAREN VALUE RPAREN),,,,VALUE,
lox,NOT,,,PREFIX,,,(?:^| )(BANG VALUE),,,,VALUE,
lox,UNARY_MINUS,,,PREFIX,,,(?:^|(?:^| )(?!(?:VALUE|RPAREN) )[A-Z_]+ )(MINUS VALUE),,,,VALUE,
lox,DIVIDE,,,PRODUCT,,,(?:^| )(VALUE SLASH VALUE),,,,VALUE,
lox,MULTIPLY,,,PRODUCT,,,(?:^| )(VALUE ASTERISK VALUE),,,,VALUE,
lox,ADD,,,SUM,,,(?:^| )(VALUE PLUS VALUE),,,,VALUE,
lox,SUBTRACT,,,SUM,,,(?:^| )(VALUE MINUS VALUE),,,,VALUE,
lox,GREATER_THAN,,,LESSGREATER,,,(?:^| )(VALUE GT VALUE),,,,VALUE,
lox,LESS_THAN,,,LESSGREATER,,,(?:^| )(VALUE LT VALUE),,,,VALUE,
lox,EQUAL,,,EQUALS,,,(?:^| )(VALUE EQ_EQ VALUE),,,,VALUE,
lox,NOT_EQUAL,,,EQUALS,,,(?:^| )(VALUE BANG_EQ VALUE),,,,VALUE,
lox,INVALID_EXPRESSION,,,,,,^(?!VALUE$)([A-Z_]+(?: [A-Z_]+)*)$,,,,VALUE,ERROR
lox,IF_STATEMENT,void,STATEMENT,,,,(?:^| )(IF CONDITION BLOCK_STATEMENT(?: ELSE BLOCK_STATEMENT)?)(?! ELSE)(?= [A-Z_]+|$),,,,,
lox,LET_STATEMENT,void,STATEMENT,,,,(?:^| )(LET VARIABLE EQ EXPRESSION SEMICOLON),,,,,
lox,RETURN_STATEMENT,,STATEMENT,,,,(?:^| )(RETURN EXPRESSION SEMICOLON),,,,,
lox,PRINT_STATEMENT,,STATEMENT,,,,(?:^| )(PRINT EXPRESSION SEMICOLON),,,,,
lox,EXPRESSION_STATEMENT,,STATEMENT,,,,(?:^| )(EXPRESSION SEMICOLON),,,,,
lox,BLOCK_STATEMENT,,,,,,(?:^| )(LBRACE(?: STATEMENT)* RBRACE),,,,,
lox,STATEMENT,,,,,,(?:^| )((?#STATEMENT)),,,,,
lox,STATEMENTS,,,,,,(?:^| )(STATEMENT(?: STATEMENT)*(?: EXPRESSION)?|EXPRESSION),,,,,
lox,UNPARSEABLE,,,,,,(?:^| )(?!STATEMENTS|UNPARSEABLE|PROGRAM)([A-Z_]+),,,,,ERROR
lox,PROGRAM,,,,,,(?:^| )((?:STATEMENTS|UNPARSEABLE)(?: (?:STATEMENTS|UNPARSEABLE))*),ALLOCA,RET,,,
