nodetype,primitivetype,nodegroup,precedence,literal,literalpattern,nodepattern,prologue,epilogue,growfrom,growinto,nodeseverity
ALLOCA,void,,,,,,,,,,
RET,void,,,,,,,,,,
SOURCE_CODE,text,,,,,,,,,,
BANG_EQ,,OPS,,!=,,,,,,,
LT_EQ,,OPS,,<=,,,,,,,
EQ_EQ,,OPS,,==,,,,,,,
GT_EQ,,OPS,,>=,,,,,,,
BANG,,OPS,,!,,,,,,,
PERCENT,,OPS,,%,,,,,,,
ASTERISK,,OPS,,*,,,,,,,
PLUS,,OPS,,+,,,,,,,
COMMA,,OPS,,",",,,,,,,
MINUS,,OPS,,-,,,,,,,
DOT,,OPS,,.,,,,,,,
COLON,,OPS,,:,,,,,,,
LT,,OPS,,<,,,,,,,
EQ,,OPS,,=,,,,,,,
GT,,OPS,,>,,,,,,,
LPAREN,,,,(,,,,,,,
RPAREN,,,,),,,,,,,
SEMICOLON,,,,;,,,,,,,
LBRACKET,,,,[,,,,,,,
RBRACKET,,,,],,,,,,,
LBRACE,,,,{,,,,,,,
RBRACE,,,,},,,,,,,
WHITE_SPACE,,,,,(\s+),,,,,,
SLASH,,OPS,,,(/[^\n\r]*),,,,,,
TEST_OUTPUT_EXPECT,,,,,^(// expect: ?)(.*)()$,,,,SLASH,,
TEST_ERROR_EXPECT,,,,,^(// )(Error.*)()$,,,,SLASH,,
TEST_ERROR_LINE_EXPECT,,,,,^(//)( \[.*line \d+\] Error.*)()$,,,,SLASH,,
COMMENT,,,,,^(//)(.*)()$,,,,SLASH,,
IDENTIFIER,name,VALUE,,,([a-zA-Z_][0-9a-zA-Z_]*),,,,,,
IF,,,,,^(if)$,,,,IDENTIFIER,,
ELSE,,,,,^(else)$,,,,IDENTIFIER,,
FUNCTION,,,,,^(fun)$,,,,IDENTIFIER,,
LET,,,,,^(var)$,,,,IDENTIFIER,,
RETURN,,,,,^(return)$,,,,IDENTIFIER,,
BOOLEAN,boolean,VALUE,,,^(true|false)$,,,,IDENTIFIER,,
INTEGER,integer,VALUE,,,([0-9]+),,,,,,
NUMERIC,numeric,VALUE,,,([0-9]+\.[0-9]+),,,,,,
TEXT,text,VALUE,,,"("")((?:[^""\\]|\\.)*)("")",,,,,,
ILLEGAL,,,,,(.),,,,,,ERROR
AND,,OPS,,,^(and)$,,,,IDENTIFIER,,
CLASS,,,,,^(class)$,,,,IDENTIFIER,,
FOR,,,,,^(for)$,,,,IDENTIFIER,,
NIL,nil,VALUE,,,^(nil)$,,,,IDENTIFIER,,
OR,,OPS,,,^(or)$,,,,IDENTIFIER,,
PRINT,,,,,^(print)$,,,,IDENTIFIER,,
SUPER,,,,,^(super)$,,,,IDENTIFIER,,
THIS,,,,,^(this)$,,,,IDENTIFIER,,
WHILE,,,,,^(while)$,,,,IDENTIFIER,,
VARIABLE,name,,,,,(?:FUNCTION |FUNCTION VARIABLE LPAREN |VARIABLE COMMA |(?=LET IDENTIFIER (?:EQ|SEMICOLON))LET )(IDENTIFIER) (?:LPAREN|EQ|COMMA|RPAREN|SEMICOLON),,,,,
FUNCTION_IDENTIFIER,,CALL,,,,(IDENTIFIER) LPAREN,,,,,
CAN_ONLY_CALL_FUNCTIONS_AND_CLASSES,,,,,,(BOOLEAN|INTEGER|TEXT|NIL) LPAREN,,,,,ERROR
ARGUMENTS,,,,,,FUNCTION VARIABLE (LPAREN(?: VARIABLE(?: COMMA VARIABLE)*)? RPAREN),,,,,
FUNCTION_DECLARATION,void,VALUE,,,,FUNCTION VARIABLE (ARGUMENTS BLOCK_STATEMENT),ALLOCA,RET,,,
ANONYMOUS_FUNCTION,,CALL,,,,(FUNCTION_DECLARATION) LPAREN,,,,,
VARIABLE_DECLARATION,,,,,,(LET VARIABLE(?: EQ)?),,,,,
CONDITION,,,,,,IF (SUB_EXPRESSION),,,,,
TRUE_BRANCH,,,,,,CONDITION (STATEMENT),,,,,
FALSE_BRANCH,,,,,,ELSE (STATEMENT),,,,,
FOR_INIT,,,,,,(FOR LPAREN (?:LET_STATEMENT|EXPRESSION_STATEMENT|SEMICOLON)),,,,,
FOR_EXIT_CONDITION,boolean,,,,,FOR_INIT (EXPRESSION_STATEMENT|SEMICOLON),,,,,
FOR_INCREMENT_STEP,void,,,,,FOR_EXIT_CONDITION ((?:EXPRESSION_STATEMENT )?RPAREN),,,,,
FOR_BODY,void,,,,,FOR_INCREMENT_STEP (STATEMENT),,,,,
FOR_STATEMENT,,STATEMENT,,,,(FOR_INIT FOR_EXIT_CONDITION FOR_INCREMENT_STEP FOR_BODY),,,,,
IF_STATEMENT,,STATEMENT,,,,(IF CONDITION TRUE_BRANCH(?: ELSE FALSE_BRANCH)?)(?! ELSE)(?= [A-Z_]+|$),,,,,
LET_STATEMENT,void,STATEMENT,,,,(VARIABLE_DECLARATION (?:EXPRESSION|EXPRESSION SEMICOLON|SEMICOLON)|FUNCTION VARIABLE FUNCTION_DECLARATION),,,,,
RETURN_STATEMENT,,STATEMENT,,,,(RETURN EXPRESSION(?: SEMICOLON)?),,,,,
PRINT_STATEMENT,,STATEMENT,,,,(PRINT EXPRESSION(?: SEMICOLON)?),,,,,
EXPRESSION_STATEMENT,,STATEMENT,,,,(EXPRESSION(?: SEMICOLON)?),,,,,
BLOCK_STATEMENT,,STATEMENT,,,,(LBRACE(?: STATEMENT)* RBRACE),ALLOCA,,,,
STATEMENT,,,,,,((?#STATEMENT)),,,,,
VALUE,,,,,,((?#VALUE)),,,,,
CALL_EXPRESSION,,VALUE,,,,((?#CALL) LPAREN(?: VALUE| (?#OPS))* RPAREN),,,VALUE,,
SUB_EXPRESSION,,VALUE,,,,(LPAREN(?: (?:VALUE|(?#OPS)))+ RPAREN),,,VALUE,,
EXPRESSION,,,,,,((?:VALUE|(?#OPS))(?: (?:VALUE|(?#OPS)))*),,,VALUE,,
CALL,,,,,,((?#CALL) LPAREN(?: VALUE(?: COMMA VALUE)*)? RPAREN),,,,VALUE,
GROUP,,,,,,(?:^|(?#OPS) )(LPAREN VALUE RPAREN),,,,VALUE,
NOT,,,PREFIX,,,(BANG VALUE),,,,VALUE,
UNARY_MINUS,,,PREFIX,,,(?:^|(?!(?:VALUE|RPAREN) )[A-Z_]+ )(MINUS VALUE),,,,VALUE,
DIVIDE,,,PRODUCT,,,(VALUE SLASH VALUE),,,,VALUE,
MULTIPLY,,,PRODUCT,,,(VALUE ASTERISK VALUE),,,,VALUE,
ADD,,,SUM,,,(VALUE PLUS VALUE),,,,VALUE,
SUBTRACT,,,SUM,,,(VALUE MINUS VALUE),,,,VALUE,
GREATER_THAN,,,LESSGREATER,,,(VALUE GT VALUE),,,,VALUE,
GREATER_THAN_OR_EQUAL_TO,,,LESSGREATER,,,(VALUE GT_EQ VALUE),,,,VALUE,
LESS_THAN,,,LESSGREATER,,,(VALUE LT VALUE),,,,VALUE,
LESS_THAN_OR_EQUAL_TO,,,LESSGREATER,,,(VALUE LT_EQ VALUE),,,,VALUE,
EQUAL,,,EQUALS,,,(VALUE EQ_EQ VALUE),,,,VALUE,
NOT_EQUAL,,,EQUALS,,,(VALUE BANG_EQ VALUE),,,,VALUE,
LOGICAL_AND,,,,,,(VALUE AND VALUE),,,,VALUE,
LOGICAL_OR,,,,,,(VALUE OR VALUE),,,,VALUE,
ASSIGNMENT,,,,,,(VALUE EQ VALUE)(?: RPAREN|$),,,,VALUE,
HASH_PAIR,,,,,,(VALUE COLON VALUE),,,,VALUE,
INVALID_EXPRESSION,,,,,,^(?!VALUE$)([A-Z_]+(?: [A-Z_]+)*)$,,,,VALUE,ERROR
STATEMENTS,,,,,,(STATEMENT(?: STATEMENT)*(?: EXPRESSION)?|EXPRESSION),,,,,
UNPARSEABLE,,,,,,(?!STATEMENTS|UNPARSEABLE|PROGRAM)([A-Z_]+),,,,,ERROR
PROGRAM,,,,,,((?:STATEMENTS|UNPARSEABLE)(?: (?:STATEMENTS|UNPARSEABLE))*),ALLOCA,RET,,,
